# Verwende Ubuntu als Basisimage
FROM ubuntu:latest

# Setze Umgebungsvariablen
ENV DEBIAN_FRONTEND=noninteractive

# Aktualisiere und installiere erforderliche Pakete
RUN apt-get update && apt-get install -y \
    python3 \
    wget \
    python3-pip \
    postgresql \
    postgresql-contrib \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Installiere Django über pip
RUN pip3 install django

# Installiere Rest Framework
RUN pip3 install djangorestframework

# Installiere Axios global mit npm
RUN npm install -g axios

# Erstelle ein Verzeichnis für das Django-Projekt
WORKDIR /app

# Installiere nvm
RUN wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

# Aktiviere nvm und installiere node mit nvm
RUN /bin/bash -c "source $HOME/.nvm/nvm.sh && nvm install --lts && nvm alias default node"

# Erstelle ein Verzeichnis für das Django-Projekt
WORKDIR /app

# Installiere React-App (create-react-app)
#RUN /bin/bash -c "source $HOME/.nvm/nvm.sh && npx create-react-app my-react-app"

# Füge PostgreSQL-Initialisierungs- und Setup-Skripte hinzu (falls nötig)

# Füge den Django-Code und React-Code hinzu
# Zum Beispiel: COPY django_project /app/django_project
# Zum Beispiel: COPY react_app /app/react_app

# Exponiere die Ports (Django, React, PostgreSQL usw.)
EXPOSE 8000 
EXPOSE 3000 
EXPOSE 5432 

# Führe Startbefehle aus (zum Beispiel Django-Server starten, React-Server starten usw.)
# CMD ["python3", "manage.py", "runserver"]
# CMD ["npm", "start"]
# CMD ["postgres"]

# Wenn PostgreSQL konfiguriert wird, müssen möglicherweise auch Datenbanken und Benutzer erstellt werden

# Beispiel für PostgreSQL-Setup:
# USER postgres
# RUN /etc/init.d/postgresql start &&\
#     psql --command "CREATE USER myuser WITH SUPERUSER PASSWORD 'mypassword';" &&\
#     createdb -O myuser mydatabase

# Führe beim Start mehrere Befehle aus (Beispiel)
# CMD [ "sh", "-c", "service postgresql start && python3 manage.py runserver 0.0.0.0:8000" ]
